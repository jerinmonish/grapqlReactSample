{"ast":null,"code":"var _jsxFileName = \"/var/www/html/jerin/gql/gpltuts/client/src/DisplayData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useQuery, useLazyQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUERY_ALL_USERS = gql`\n  query getAllUsers{\n    users {\n      id,\n      name,\n      age,\n      username,\n      nationality,\n      friends {\n        name,\n        age\n      }\n    }\n  }\n`;\nconst QUERY_ALL_MOVIES = gql`\n  query getAllMovies{\n      movies {\n        id,\n        name,\n        yearOfPub,\n        isInTheaters\n      }\n  }\n`;\nconst GET_MOVIE_BY_NAME = gql`\n  query getMovieByName($name: String!){\n    movie(name: $name) {\n      id,\n      name,\n      yearOfPub\n    }\n  }\n`;\n\nfunction DisplayData() {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(QUERY_ALL_USERS);\n  const {\n    data: movieData,\n    loading: movieLoading,\n    error: movieError\n  } = useQuery(QUERY_ALL_MOVIES);\n  const [movieSearched, setMovieSearched] = useState(\"\");\n  const [fetchMovie, {\n    data: movieSearchData,\n    error: movieSearchError\n  }] = useLazyQuery();\n\n  if (loading) {\n    /*#__PURE__*/\n    _jsxDEV(\"h1\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this);\n  }\n\n  if (error) {\n    console.log(error);\n  }\n\n  if (data) {\n    console.log(data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [data && data.users.map((user, idx) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: idx,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Name: \", user.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Username: \", user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Age: \", user.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Nationality: \", user.nationality]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this);\n    }), movieData && movieData.movies.map((movies, mvx) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: [\"Movie Name:\", movies.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Red ...\",\n        onChange: event => {\n          setMovieSearched(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMovie,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DisplayData, \"FCYXk+awn3cH2IuhLQC975UsFpk=\", false, function () {\n  return [useQuery, useQuery, useLazyQuery];\n});\n\n_c = DisplayData;\nexport default DisplayData;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayData\");","map":{"version":3,"sources":["/var/www/html/jerin/gql/gpltuts/client/src/DisplayData.js"],"names":["React","useState","useQuery","useLazyQuery","gql","QUERY_ALL_USERS","QUERY_ALL_MOVIES","GET_MOVIE_BY_NAME","DisplayData","data","loading","error","movieData","movieLoading","movieError","movieSearched","setMovieSearched","fetchMovie","movieSearchData","movieSearchError","console","log","users","map","user","idx","name","username","age","nationality","movies","mvx","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,GAAjC,QAA4C,gBAA5C;;AACA,MAAMC,eAAe,GAAGD,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAgBA,MAAME,gBAAgB,GAAEF,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,MAAMG,iBAAiB,GAAGH,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;;AAUA,SAASI,WAAT,GAAsB;AAAA;;AACpB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BT,QAAQ,CAACG,eAAD,CAAzC;AACA,QAAM;AAAEI,IAAAA,IAAI,EAAEG,SAAR;AAAmBF,IAAAA,OAAO,EAAEG,YAA5B;AAA0CF,IAAAA,KAAK,EAAEG;AAAjD,MAAgEZ,QAAQ,CAACI,gBAAD,CAA9E;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACgB,UAAD,EAAa;AAACR,IAAAA,IAAI,EAAES,eAAP;AAAwBP,IAAAA,KAAK,EAAEQ;AAA/B,GAAb,IAAiEhB,YAAY,EAAnF;;AACA,MAAGO,OAAH,EAAW;AACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD;;AACD,MAAGC,KAAH,EAAS;AACPS,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACD;;AACD,MAAGF,IAAH,EAAQ;AACNW,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ;AACD;;AACD,sBACE;AAAA,eACGA,IAAI,IAAIA,IAAI,CAACa,KAAL,CAAWC,GAAX,CAAe,CAACC,IAAD,EAAOC,GAAP,KAAe;AACrC,0BACE;AAAK,QAAA,EAAE,EAAEA,GAAT;AAAA,gCACE;AAAA,+BAAWD,IAAI,CAACE,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,mCAAeF,IAAI,CAACG,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE;AAAA,8BAAUH,IAAI,CAACI,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE;AAAA,sCAAkBJ,IAAI,CAACK,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KATQ,CADX,EAYGjB,SAAS,IAAIA,SAAS,CAACkB,MAAV,CAAiBP,GAAjB,CAAqB,CAACO,MAAD,EAASC,GAAT,KAAgB;AACjD,0BACE;AAAA,+BACE;AAAA,iCAAI;AAAA,sCAAeD,MAAM,CAACJ,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD,KANa,CAZhB,eAoBE;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,SAA/B;AAAyC,QAAA,QAAQ,EAAGM,KAAD,IAAW;AAAEhB,UAAAA,gBAAgB,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB;AAAsC;AAAtG;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEjB,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;;GA5CQT,W;UAC0BN,Q,EACqCA,Q,EAECC,Y;;;KAJhEK,W;AA8CT,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useLazyQuery ,gql } from \"@apollo/client\";\nconst QUERY_ALL_USERS = gql`\n  query getAllUsers{\n    users {\n      id,\n      name,\n      age,\n      username,\n      nationality,\n      friends {\n        name,\n        age\n      }\n    }\n  }\n`\n\nconst QUERY_ALL_MOVIES= gql`\n  query getAllMovies{\n      movies {\n        id,\n        name,\n        yearOfPub,\n        isInTheaters\n      }\n  }\n`\n\nconst GET_MOVIE_BY_NAME = gql`\n  query getMovieByName($name: String!){\n    movie(name: $name) {\n      id,\n      name,\n      yearOfPub\n    }\n  }\n`\n\nfunction DisplayData(){\n  const { data, loading, error } = useQuery(QUERY_ALL_USERS);\n  const { data: movieData, loading: movieLoading, error: movieError } = useQuery(QUERY_ALL_MOVIES);\n  const [movieSearched, setMovieSearched] = useState(\"\");\n  const [fetchMovie, {data: movieSearchData, error: movieSearchError}] = useLazyQuery()\n  if(loading){\n    <h1>Loading ...</h1>\n  }\n  if(error){\n    console.log(error);\n  }\n  if(data){\n    console.log(data);\n  }\n  return (\n    <div>\n      {data && data.users.map((user, idx) => {\n        return (\n          <div id={idx}>\n            <h1>Name: {user.name}</h1>\n            <h1>Username: {user.username}</h1>\n            <h1>Age: {user.age}</h1>\n            <h1>Nationality: {user.nationality}</h1>\n          </div>\n        );\n      })}\n\n      {movieData && movieData.movies.map((movies, mvx)=> {\n        return (\n          <div>\n            <h1><i>Movie Name:{movies.name}</i></h1>\n          </div>\n        )\n      })}\n      \n      <div>\n        <input type=\"text\" placeholder=\"Red ...\" onChange={(event) => { setMovieSearched(event.target.value) }}/>\n        <button onClick={fetchMovie}>Search</button>\n        <div>\n\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DisplayData;"]},"metadata":{},"sourceType":"module"}