{"ast":null,"code":"var _jsxFileName = \"/var/www/html/jerin/gql/gpltuts/client/src/DisplayData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useQuery, useLazyQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUERY_ALL_USERS = gql`\n  query getAllUsers{\n    users {\n      id,\n      name,\n      age,\n      username,\n      nationality,\n      friends {\n        name,\n        age\n      }\n    }\n  }\n`;\nconst QUERY_ALL_MOVIES = gql`\n  query getAllMovies{\n      movies {\n        id,\n        name,\n        yearOfPub,\n        isInTheaters\n      }\n  }\n`;\nconst GET_MOVIE_BY_NAME = gql`\n  query Movie($name: String!){\n    movie(name: $name) {\n      id,\n      name,\n      yearOfPub\n    }\n  }\n`;\nconst CREATE_USER_MUTATION = gql`\n  mutation CreateUser($input: CreateUserInput!){\n    createUser(input: $createUserInput) {\n      name,\n      username,\n      age,\n      nationality\n    }\n  }\n`;\n\nfunction DisplayData() {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(QUERY_ALL_USERS);\n  const {\n    data: movieData,\n    loading: movieLoading,\n    error: movieError\n  } = useQuery(QUERY_ALL_MOVIES);\n  const [movieSearched, setMovieSearched] = useState(\"\");\n  const [fetchMovie, {\n    data: movieSearchData,\n    error: movieSearchError\n  }] = useLazyQuery(GET_MOVIE_BY_NAME); //Create User states\n\n  const [name, setName] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [nationality, setNationality] = useState(\"\");\n\n  if (loading) {\n    /*#__PURE__*/\n    _jsxDEV(\"h1\", {\n      children: \"Loading ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this);\n  }\n\n  if (error) {\n    console.log(error);\n  }\n\n  if (data) {\n    console.log(data);\n  }\n\n  if (movieSearchError) {\n    console.log(movieSearchError);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Name: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Name\",\n        onChange: event => {\n          setName(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this), \"Username: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        onChange: event => {\n          setUsername(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }, this), \"Age: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Age\",\n        onChange: event => {\n          setAge(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 14\n      }, this), \"Nationality: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Nationality\",\n        onChange: event => {\n          setNationality(event.target.value.toUpperCase());\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), data && data.users.map((user, idx) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: idx,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Name: \", user.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Username: \", user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Age: \", user.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Nationality: \", user.nationality]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this);\n    }), movieData && movieData.movies.map((movies, mvx) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            children: [\"Movie Name:\", movies.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Red ...\",\n        onChange: event => {\n          setMovieSearched(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchMovie({\n            variables: {\n              name: movieSearched\n            }\n          });\n        },\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [movieSearchData && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Moviename: \", movieSearchData.movie.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), \"\", /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Year of Release: \", movieSearchData.movie.yearOfPub]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), movieSearchError && /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"No Such Movies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DisplayData, \"AB5iNX/dsPr9IqgTw8ZyfM+P4DY=\", false, function () {\n  return [useQuery, useQuery, useLazyQuery];\n});\n\n_c = DisplayData;\nexport default DisplayData;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayData\");","map":{"version":3,"sources":["/var/www/html/jerin/gql/gpltuts/client/src/DisplayData.js"],"names":["React","useState","useQuery","useLazyQuery","gql","QUERY_ALL_USERS","QUERY_ALL_MOVIES","GET_MOVIE_BY_NAME","CREATE_USER_MUTATION","DisplayData","data","loading","error","movieData","movieLoading","movieError","movieSearched","setMovieSearched","fetchMovie","movieSearchData","movieSearchError","name","setName","username","setUsername","age","setAge","nationality","setNationality","console","log","event","target","value","toUpperCase","users","map","user","idx","movies","mvx","variables","movie","yearOfPub"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, useLazyQuery ,gql } from \"@apollo/client\";\nconst QUERY_ALL_USERS = gql`\n  query getAllUsers{\n    users {\n      id,\n      name,\n      age,\n      username,\n      nationality,\n      friends {\n        name,\n        age\n      }\n    }\n  }\n`\n\nconst QUERY_ALL_MOVIES= gql`\n  query getAllMovies{\n      movies {\n        id,\n        name,\n        yearOfPub,\n        isInTheaters\n      }\n  }\n`\n\nconst GET_MOVIE_BY_NAME = gql`\n  query Movie($name: String!){\n    movie(name: $name) {\n      id,\n      name,\n      yearOfPub\n    }\n  }\n`\n\nconst CREATE_USER_MUTATION = gql`\n  mutation CreateUser($input: CreateUserInput!){\n    createUser(input: $createUserInput) {\n      name,\n      username,\n      age,\n      nationality\n    }\n  }\n`\n\nfunction DisplayData(){\n  const { data, loading, error } = useQuery(QUERY_ALL_USERS);\n  const { data: movieData, loading: movieLoading, error: movieError } = useQuery(QUERY_ALL_MOVIES);\n  const [movieSearched, setMovieSearched] = useState(\"\");\n  const [fetchMovie, { data: movieSearchData, error: movieSearchError }] = useLazyQuery(GET_MOVIE_BY_NAME)\n  \n  //Create User states\n  const [name, setName] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [nationality, setNationality] = useState(\"\");\n\n  if(loading){\n    <h1>Loading ...</h1>\n  }\n  if(error){\n    console.log(error);\n  }\n  if(data){\n    console.log(data);\n  }\n\n  if (movieSearchError){\n    console.log(movieSearchError);\n  }\n  return (\n    <div>\n      <div>\n        Name: <input type=\"text\" placeholder=\"Name\" onChange={(event) => { setName(event.target.value) }}/>\n        Username: <input type=\"text\" placeholder=\"Username\" onChange={(event) => { setUsername(event.target.value) }}/>\n        Age: <input type=\"text\" placeholder=\"Age\" onChange={(event) => { setAge(event.target.value) }}/>\n        Nationality: <input type=\"text\" placeholder=\"Nationality\" onChange={(event) => { setNationality(event.target.value.toUpperCase()) }}/>\n        <button>Create User</button>\n      </div>\n      {data && data.users.map((user, idx) => {\n        return (\n          <div id={idx}>\n            <h1>Name: {user.name}</h1>\n            <h1>Username: {user.username}</h1>\n            <h1>Age: {user.age}</h1>\n            <h1>Nationality: {user.nationality}</h1>\n          </div>\n        );\n      })}\n\n      {movieData && movieData.movies.map((movies, mvx)=> {\n        return (\n          <div>\n            <h1><i>Movie Name:{movies.name}</i></h1>\n          </div>\n        )\n      })}\n      \n      <div>\n        <input type=\"text\" placeholder=\"Red ...\" onChange={(event) => { setMovieSearched(event.target.value) }}/>\n        <button \n          onClick={() => { \n            fetchMovie({\n              variables: {\n                name: movieSearched\n              }\n            }) \n          }}\n        >Search</button>\n        <div>\n          { movieSearchData && (\n            <div>\n              {\" \"}\n              <h1>Moviename: {movieSearchData.movie.name}</h1>{\"\"}\n              <h1>Year of Release: {movieSearchData.movie.yearOfPub}</h1>{\"\"}\n            </div>\n          )}\n          { movieSearchError && <h1>No Such Movies</h1>}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default DisplayData;"]},"metadata":{},"sourceType":"module"}